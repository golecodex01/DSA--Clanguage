

/***************************************************
 * All Operation of Array Done BY Mohit Gole ***
 * *****************************************************
 * ***************************************************/


#include <stdio.h>
#define size 10

int data[size];
int currentposition = -1;

void displayMenu() {
    printf("Press 1 for Insert at First : \n");
    printf("Press 2 for Insert at Last : \n");
    printf("Press 3 for Insert at Index : \n");
    printf("Press 4 for Remove at First : \n");
    printf("Press 5 for Remove at Last : \n");
    printf("Press 6 for Remove at Index : \n");
    printf("Press 7 for View First : \n");
    printf("Press 8 for View Last : \n");
    printf("Press 9 for View Index : \n");
    printf("Press 10 for Update First : \n");
    printf("Press 11 for Update Last : \n");
    printf("Press 12 for Update Index : \n");
    printf("Press 13 for Get Minimum : \n");
    printf("Press 14 for Get Maximum : \n");
    printf("Press 15 for Linear Search : \n");
    printf("Press 16 for Ascending Sorting : \n");
    printf("Press 17 for Descending Sorting : \n");
    printf("Press 18 for Binary Search : \n");
}

void addfirst(int value) {
    if (currentposition < size - 1) {
        currentposition++;
        for (int i = currentposition; i > 0; i--) {
            data[i] = data[i - 1];
        }
        data[0] = value;
    } else {
        printf("Please try again, Array is Full\n");
    }
}

void addLast(int value) {
    if (currentposition < size - 1) {
        currentposition++;
        data[currentposition] = value;
        printf("After Adding in last\n");
    } 
    else {
        printf("Array is Full\n");
    }
}

void addIndex(int index, int value) {
    if (currentposition < size - 1 && index >= 0 && index <= currentposition + 1) {
        currentposition++;
        for (int i = currentposition; i > index; i--) {
            data[i] = data[i - 1];
        }
        data[index] = value;
        printf("After Adding %d on index %d\n", value, index);
    }
    else {
        printf("Please try again\n");
    }
}

void removeFirst() {
    if (currentposition >= 0) {
        for (int i = 0; i < currentposition; i++) {
            data[i] = data[i + 1];
        }
        currentposition--;
    } 
    else {
        printf("Array is Empty\n");
    }
}

void removeLast() {
    if (currentposition >= 0) {
        currentposition--;
    }
    else {
        printf("Array is Empty\n");
    }
}

void removeIndex(int index) {
    if (currentposition >= 0 && index >= 0 && index <= currentposition) {
        for (int i = index; i < currentposition; i++) {
            data[i] = data[i + 1];
        }
        currentposition--;
    }
    else {
        printf("Invalid Index or Array is Empty\n");
    }
}

void viewFirst() {
    if (currentposition >= 0) {
        printf("First value is %d\n", data[0]);
    }
    else {
        printf("Array is Empty\n");
    }
}

void viewLast() {
    if (currentposition >= 0) {
        printf("Last value is %d\n", data[currentposition]);
    } 
    else {
        printf("Array is Empty\n");
    }
}

void viewIndex(int index) {
    if (currentposition >= 0 && index >= 0 && index <= currentposition) {
        printf("Value at index %d is %d\n", index, data[index]);
    }
    else {
        printf("Invalid Index or Array is Empty\n");
    }
}

void updatefirst(int value) {
    if (currentposition >= 0) {
        data[0] = value;
    }
    else {
        printf("Array is Empty\n");
    }
}

void updatelast(int value) {
    if (currentposition >= 0) {
        data[currentposition] = value;
    }
    else {
        printf("Array is Empty\n");
    }
}

void updateindex(int index, int value) {
    if (currentposition >= 0 && index >= 0 && index <= currentposition) {
        data[index] = value;
    }
    else {
        printf("Invalid Index or Array is Empty\n");
    }
}

void getMinimum() {
    if (currentposition < 0) {
        printf("Array is Empty\n");
        return;
    }
    int min = data[0];
    for (int i = 1; i <= currentposition; i++) {
        if (data[i] < min) {
            min = data[i];
        }
    }
    printf("Minimum is %d\n", min);
}

void getMaximum() {
    if (currentposition < 0) {
        printf("Array is Empty\n");
        return;
    }
    int max = data[0];
    for (int i = 1; i <= currentposition; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }
    printf("Maximum is %d\n", max);
}

void linearSearch(int value) {
    if (currentposition >= 0) {
        int f = 0;
        for (int i = 0; i <= currentposition; i++) {
            if (data[i] == value) {
                f = 1;
                break;
            }
        }
        if (f == 1) {
            printf("Element is Found\n");
        } else {
            printf("Not Found\n");
        }
    } else {
        printf("Array is Empty\n");
    }
}

void ascendingShorting() {
    int temp;
    for (int i = 0; i < currentposition; i++) {
        for (int j = i + 1; j <= currentposition; j++) {
            if (data[i] > data[j]) {
                temp = data[i];
                data[i] = data[j];
                data[j] = temp;
            }
        }
    }
}

void descendingShorting() {
    int temp;
    for (int i = 0; i < currentposition; i++) {
        for (int j = i + 1; j <= currentposition; j++) {
            if (data[i] < data[j]) {
                temp = data[i];
                data[i] = data[j];
                data[j] = temp;
            }
        }
    }
}

void printArray() {
    if (currentposition < 0) {
        printf("Array is Empty\n");
        return;
    }
    for (int i = 0; i <= currentposition; i++) {
        printf("%d ", data[i]);
    }
    printf("\n");
}

void BinarySearch(int value) {
    if (currentposition >= 0) {
        ascendingShorting();

        int low = 0, high = currentposition, found = 0;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (data[mid] == value) {
                found = 1;
                break;
            } else if (data[mid] < value) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        if (found) {
            printf("Element Found\n");
        } else {
            printf("Element Not Found\n");
        }
    } else {
        printf("Array is Empty\n");
    }
}

int main() {
    int element;
    int choice;
    int index;

    do {
        displayMenu();
        printf("\n\nEnter your Choice : ");
        scanf("%d", &choice);

        switch (choice) {

        case 1:
            printf("Enter value to Insert: ");
            scanf("%d", &element);
            addfirst(element);
            printArray();
            break;

        case 2:
            printf("Enter value to Insert: ");
            scanf("%d", &element);
            addLast(element);
            printArray();
            break;

        case 3:
            printf("Enter value to Insert: ");
            scanf("%d", &element);
            printf("Enter Index: ");
            scanf("%d", &index);
            addIndex(index, element);
            printArray();
            break;

        case 4:
            removeFirst();
            printArray();
            break;

        case 5:
            removeLast();
            printArray();
            break;

        case 6:
            printf("Enter Index: ");
            scanf("%d", &index);
            removeIndex(index);
            printArray();
            break;

        case 7:
            viewFirst();
            break;

        case 8:
            viewLast();
            break;

        case 9:
            printf("Enter Index: ");
            scanf("%d", &index);
            viewIndex(index);
            break;

        case 10:
            printf("Enter value to Update First: ");
            scanf("%d", &element);
            updatefirst(element);
            printArray();
            break;

        case 11:
            printf("Enter value to Update Last: ");
            scanf("%d", &element);
            updatelast(element);
            printArray();
            break;

        case 12:
            printf("Enter value to Update Index: ");
            scanf("%d", &element);
            printf("Enter Index: ");
            scanf("%d", &index);
            updateindex(index, element);
            printArray();
            break;

        case 13:
            getMinimum();
            break;

        case 14:
            getMaximum();
            break;

        case 15:
            printf("Enter element to Search: ");
            scanf("%d", &element);
            linearSearch(element);
            break;

        case 16:
            ascendingShorting();
            printArray();
            break;

        case 17:
            descendingShorting();
            printArray();
            break;

        case 18:
            printf("Enter element to Search: ");
            scanf("%d", &element);
            BinarySearch(element);
            break;

        default:
            printf("Enter Again\n");
        }

        printf("Do You want to continue? (1 for Yes / 0 for No): ");
        scanf("%d", &choice);

    }
    while (choice != 0);

    return 0;
}
